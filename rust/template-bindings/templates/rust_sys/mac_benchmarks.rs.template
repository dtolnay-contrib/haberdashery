// {generated}
use crate::mac::Data;
use crate::mac::Vtable;
use haberdashery_sys::mac::{algorithm}::{profile}::*;
use nano_bench::Measure;

const VTABLE: Vtable<{struct_name}> = Vtable::<{struct_name}> {
    _ty: core::marker::PhantomData,
    key_len: {struct_name}::KEY_LEN,
    tag_len: {struct_name}::TAG_LEN,
    init: {prefix}_{algorithm}_{profile}_init,
    sign: {prefix}_{algorithm}_{profile}_sign,
    verify: {prefix}_{algorithm}_{profile}_verify,
};

#[nano_bench::benchmark(
    library:{prefix},
    primitive:mac,
    algorithm:{algorithm},
    profile:{profile},
    operation:init,
)]
fn init(iters: u64, measure: &mut dyn Measure) {
    if unsafe { 0 == {prefix}_{algorithm}_{profile}_is_supported() } {
        measure.skip();
        return;
    }
    let mut data = Data::new(VTABLE, 0);
    measure.start();
    for _ in 0..iters {
        data.init();
    }
    measure.stop();
}
#[nano_bench::benchmark(
    library:{prefix},
    primitive:mac,
    algorithm:{algorithm},
    profile:{profile},
    operation:sign,
)]
fn sign(length: usize, iters: u64, measure: &mut dyn Measure) {
    if unsafe { 0 == {prefix}_{algorithm}_{profile}_is_supported() } {
        measure.skip();
        return;
    }
    let mut data = Data::new(VTABLE, length);
    measure.start();
    for _ in 0..iters {
        data.sign();
    }
    measure.stop();
}
