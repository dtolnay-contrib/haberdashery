// {generated}

use core::arch::x86_64::__m128i;

#[repr(C)]
#[allow(unused)]
pub struct {struct_name} {
    {struct_content}
}
impl {struct_name} {
    pub const {KEY_LEN_NAME}: usize = {KEY_LEN_VALUE};
    pub const {TAG_LEN_NAME}: usize = {TAG_LEN_VALUE};
}

#[allow(improper_ctypes)]
extern "C" {
    pub fn {prefix}_{algorithm}_{profile}_init(this: *mut {struct_name}, key: *const u8, key_len: usize) -> i32;
    pub fn {prefix}_{algorithm}_{profile}_sign(
        this: *const {struct_name},
        message: *const u8,
        message_len: usize,
        tag: *mut u8,
        tag_len: usize,
    ) -> i32;
    pub fn {prefix}_{algorithm}_{profile}_verify(
        this: *const {struct_name},
        message: *const u8,
        message_len: usize,
        tag: *const u8,
        tag_len: usize,
    ) -> i32;
    pub fn {prefix}_{algorithm}_{profile}_is_supported() -> i32;
}

#[test]
fn test() {
    unsafe {
        if 0 == {prefix}_{algorithm}_{profile}_is_supported() {
            return;
        }
        let key = [0u8; {struct_name}::{KEY_LEN_NAME}];
        let message = [0u8; 1];
        let mut tag = [0u8; {struct_name}::{TAG_LEN_NAME}];

        let mut this = core::mem::MaybeUninit::<{struct_name}>::uninit();
        assert_ne!({prefix}_{algorithm}_{profile}_init(this.as_mut_ptr(), key.as_ptr(), key.len()), 0);
        assert_ne!({prefix}_{algorithm}_{profile}_sign(
            this.as_ptr(),
            message.as_ptr(),
            message.len(),
            tag.as_mut_ptr(),
            tag.len(),
        ), 0);
        assert_ne!({prefix}_{algorithm}_{profile}_verify(
            this.as_ptr(),
            message.as_ptr(),
            message.len(),
            tag.as_ptr(),
            tag.len(),
        ), 0);
    }
}
